---
description:
globs:
alwaysApply: true
---
# Cursor Rules for next-fast52 🛠️

These rules help keep the vibe consistent, clean, and fun to build with.

## ✅ Project Principles
- ✅ Prioritize simplicity and speed over perfection.
- ✅ Favor shipping over over-engineering.
- ✅ Favor shipping over over-engineering.
- ✅ Make it easy to extend without forcing opinions.

## ✅ Folder & File Structure
- Place **low-level components** in `src/components/ui/` (copied from shadcn/ui).
- Place **custom sections** like Hero, Pricing, etc., in `src/components/sections/`.
- Place **layouts** like Navbar or Footer in `src/components/layout/`.
- Place **API helpers** like Supabase, Stripe, and AI clients in `src/lib/`.
- Place **pages** and **routes** in `src/app/`.

## ✅ Code Style
- Use **TypeScript** for all files.
- Prefer **async/await** over Promises.
- Use **ES Modules** (`import/export`) only.
- Avoid **default exports** unless it's a page or top-level layout.

## ✅ UI and Styling
- Use **Tailwind CSS** for styling.
- Do not hardcode colors, use **theme tokens or Tailwind utilities**.
- Use **Framer Motion** for any custom animations.
- Feel free to mix **shadcn/ui components** with custom components.

## ✅ API and State
- Use **Supabase client** from `src/lib/supabaseClient.ts`.
- Use **Stripe client** from `src/lib/stripe.ts`.
- Use **AI client** from `src/lib/aiClient.ts`.
- Use **fetch** or **API Routes** for server communication.

## ✅ Error Handling
- Log errors clearly to the console with helpful messages.
- Return clean fallback values if possible, not raw error objects.

## ✅ Developer Experience
- Add helpful comments if the function or file isn’t self-explanatory.
- Avoid over-documenting obvious code.
- Make it feel fun and approachable to extend.

## ❌ Anti-Patterns to Avoid
- ❌ Repeating client initialization (import from lib/ instead).
- ❌ Hardcoding URLs, API keys, or tokens (use `.env.local`).
- ❌ Writing overly generic helpers unless truly reusable.

## ✅ Output Style
- Make code **readable over clever**.
- Write code as if someone **new to the project** will pick it up next week.

Happy building 🚀
